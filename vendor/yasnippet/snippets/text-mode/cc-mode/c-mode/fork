# name: fork posix api
# --
int pipes[2];
assert(pipe(pipes) == 0);
pid_t child_pid = vfork();
assert(child_pid != -1);

if(child_pid == 0) {        /* child */
  close(pipes[1]);          /* close write end */
  dup2(pipes[0], 0);        /* duplicate read end */
  close(pipes[0]);          /* close read end */

  int ret = /* execvp(args[0], args) */;
  if ( ret == -1 ) {        /* seldom return, except syscall failed */
    perror(strerror(errno));
    exit(1);
  } 

} else {                    /* parent */
  close(pipes[0]);          /* close read end */
  write(pipes[1], /* message, size */);
  write(pipes[1], "\n", 1);
  close(pipes[1]);          /* after send message to child, close write end */

  int status;
  pid_t cpid = wait(&status);
  if ( !WIFEXITED(status) ) {
    printf("child process %d failed\n", cpid);
  } else {
    printf("child process done: %d\n", cpid);
  }
}


